#!/usr/bin/env node
const path = require('path')
const yargs = require('yargs')
const inquirer = require('inquirer')
const { runScript } = require('../run-script')
const { Options } = require('../options')
let configPath = path.join(path.resolve('./'), 'packages.config.js')
if (yargs.argv.c || yargs.argv.config) {
  configPath = path.join(process.cwd(), yargs.argv.c || yargs.argv.config)
}
const config = require(configPath)

if (!config.commands) {
  config.commands = {}
}
if (!config.packages) {
  config.packages = []
}
if (!config.defaultActions) {
  config.defaultActions = []
}

void async function main() {
  console.clear()

  if (yargs.argv._.length !== 0) {
    const scripts = yargs.argv._
    console.time('Task');
    for (const script of scripts) {
      await runScript(config.packages, config.commands[script] || script)
    }
    console.timeEnd('Task');
    process.exit()
  }

  const result = await inquirer.prompt([
    { 
      type: 'list', 
      name: 'default-action', 
      message: 'Please select an action',
      pageSize: 100,
      choices: [
        ...config.defaultActions.map(action => ({ name: action.name, value: action })),
        new inquirer.Separator(),
        { name: 'Manual Selection', value: '[[manual-selection]]' },
      ]
    }
  ])

  console.clear()
  if (result['default-action'] !== '[[manual-selection]]') {
    const { commands, packages, options = [] } = result['default-action']
    console.time('Task');
    for (const script of commands) {
      await runScript(
        selectPackages(
          (packages && packages.map(p => p.name)) || config.packages.map(p => p.name), 
          !options.includes(Options.Shallow),
        ), 
        script, 
        options,
      )
    }
    console.timeEnd('Task');
    process.exit(0)
  }

  const manualResult = await inquirer
    .prompt([
      {
        type: 'checkbox', 
        name: 'selected-packages', 
        message: 'What packages do you want to run?', 
        pageSize: 100,
        choices: config.packages.map(pkg => ({ name: pkg.name }))
      },
      {
        type: 'checkbox', 
        name: 'options', 
        message: 'What options?', 
        pageSize: 100,
        choices: [
          { name: 'Run on dependencies (deep)', value: 'deep', checked: true },
          { name: 'Exit all on failure', value: Options.KillOthersOnFailure, checked: true },
          { name: 'Exit all on success', value: Options.KillOthersOnSuccess, checked: true },
        ]
      },
      {
        type: 'input',
        name: 'run-scripts',
        message: 'What scripts do you want to run?'
      }
    ])

    // console.log(yargs.argv['deep'], yargs.argv['deep'] === 'false', yargs.argv['deep'] !== 'false')

  const selected = selectPackages(
    manualResult['selected-packages'], 
    yargs.argv['deep'] !== 'false'
  )

  console.time('Task');
  for (const script of manualResult['run-scripts'].split(' ')) {
    await runScript(selected, script)
  }
  console.timeEnd('Task');
}()


const selectPackages = (pkgArr, deep = true) => {
  const getDependencies = (pkg, pkgs = {}) => {
    pkgs[pkg.name] = pkg
    for (const dep of pkg.dependsOn || []) {
      pkgs[dep.name] = dep
      getDependencies(dep, pkgs)
    }
    return Object.values(pkgs)
  }

  const selectedPackages = {}
  
  pkgArr
    .map(pkgName => config.packages.find(pkg => pkg.name === pkgName))
    .forEach(pkg => {
      if (deep) {
        getDependencies(pkg, selectedPackages)
      } else {
        selectedPackages[pkg.name] = pkg
      }
    })

  return Object.values(selectedPackages)
}
